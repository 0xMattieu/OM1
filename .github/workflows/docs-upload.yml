name: Upload Documentation Updates

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**/*.mdx'
      - 'docs/**/*.md'
      - 'README.md'
      - 'CONTRIBUTING.md'
  workflow_dispatch:  # Allow manual trigger

env:
  API_ENDPOINT: 'https://api.openmind.org/api/core/upload'
  INTERNAL_AUTH_TOKEN: ${{ secrets.INTERNAL_AUTH_TOKEN }}

jobs:
  upload-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to detect changes
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            docs/**/*.mdx
            docs/**/*.md
            README.md
            CONTRIBUTING.md
          separator: ','
      
      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          pip install requests beautifulsoup4 markdown
      
      - name: Upload changed documentation files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          python -c "
import os
import requests
import sys
import re
from pathlib import Path
from bs4 import BeautifulSoup
import markdown

def parse_mdx_to_text(content):
    '''Extract text from MDX files preserving code blocks and their language info'''
    # Decode bytes to string
    text = content.decode('utf-8', errors='ignore')
    
    # Remove import statements
    text = re.sub(r'^import\s+.*?$', '', text, flags=re.MULTILINE)
    
    # Remove export statements
    text = re.sub(r'^export\s+.*?$', '', text, flags=re.MULTILINE)
    
    # Remove JSX/React components (anything between < and >)
    # But preserve content inside them
    text = re.sub(r'<([A-Z][a-zA-Z0-9]*)[^>]*>(.*?)</\\1>', r'\\2', text, flags=re.DOTALL)
    text = re.sub(r'<[^>]+/>', '', text)  # Remove self-closing tags
    
    # Process code blocks with language information
    def replace_code_block(match):
        language = match.group(1) or 'plaintext'
        code_content = match.group(2).strip()
        
        # Format based on language type
        if language in ['bash', 'shell', 'sh']:
            return f'\\n[Command Line - {language}]:\\n{code_content}\\n'
        elif language in ['python', 'javascript', 'typescript', 'jsx', 'tsx', 'java', 'cpp', 'c']:
            return f'\\n[Code - {language}]:\\n{code_content}\\n'
        elif language in ['json', 'yaml', 'yml', 'toml', 'xml']:
            return f'\\n[Configuration - {language}]:\\n{code_content}\\n'
        else:
            return f'\\n[Code Block - {language}]:\\n{code_content}\\n'
    
    # Replace code blocks while preserving language info
    text = re.sub(r'```([a-zA-Z]*)?\\n(.*?)```', replace_code_block, text, flags=re.DOTALL)
    
    # Process inline code
    text = re.sub(r'`([^`]+)`', r'[inline code: \\1]', text)
    
    # Convert remaining markdown elements
    # Headers
    text = re.sub(r'^#{1,6}\\s+(.+)$', r'\\n\\1\\n', text, flags=re.MULTILINE)
    
    # Bold text
    text = re.sub(r'\\*\\*(.+?)\\*\\*', r'\\1', text)
    text = re.sub(r'__(.+?)__', r'\\1', text)
    
    # Italic text
    text = re.sub(r'\\*(.+?)\\*', r'\\1', text)
    text = re.sub(r'_(.+?)_', r'\\1', text)
    
    # Links
    text = re.sub(r'\\[([^\\]]+)\\]\\(([^)]+)\\)', r'\\1 (\\2)', text)
    
    # Lists
    text = re.sub(r'^[\\*\\-\\+]\\s+', '• ', text, flags=re.MULTILINE)
    text = re.sub(r'^\\d+\\.\\s+', '', text, flags=re.MULTILINE)
    
    # Clean up extra whitespace
    text = re.sub(r'\\n{3,}', '\\n\\n', text)
    text = text.strip()
    
    return text

upload_url = os.environ.get('API_ENDPOINT')
auth_token = os.environ.get('INTERNAL_AUTH_TOKEN')

if not auth_token:
    print('Error: INTERNAL_AUTH_TOKEN not set in GitHub secrets')
    sys.exit(1)

changed_files = '${{ steps.changed-files.outputs.all_changed_files }}'.split(',')

headers = {
    'Authorization': f'Bearer {auth_token}'
}

for file_path in changed_files:
    file_path = file_path.strip()
    if not file_path:
        continue
    
    print(f'Processing: {file_path}')
    
    if not os.path.exists(file_path):
        continue
    
    # Read file content
    with open(file_path, 'rb') as f:
        raw_content = f.read()
    
    file_extension = Path(file_path).suffix.lower()
    
    # Parse MDX/MD files to extract text
    if file_extension in ['.mdx', '.md']:
        text_content = parse_mdx_to_text(raw_content)
    else:
        # For other files, just decode as text
        text_content = raw_content.decode('utf-8', errors='ignore')
    
    # Use original filename but with .txt extension
    txt_filename = Path(file_path).stem + '.txt'
    files = {'file': (txt_filename, text_content.encode('utf-8'), 'text/plain')}
    
    try:
        response = requests.post(upload_url, headers=headers, files=files, timeout=30)
        if response.status_code == 200:
            print(f'  ✓ Success')
        else:
            print(f'  ✗ Failed: {response.status_code}')
            sys.exit(1)
    except Exception as e:
        print(f'  ✗ Error: {str(e)}')
        sys.exit(1)
"
      
 