////
//// This file presents the default configuration used by both the `zenoh-plugin-ros2dds` plugin and the `zenoh-bridge-ros2dds` standalone executable.
//// The "ros2" JSON5 object below can be used as such in the "plugins" part of a config file for the zenoh router (zenohd).
{
  plugins: {
    ros2dds: {
      id: "cleaner-2-rpi",
      nodename: "zenoh_bridge_ros2dds_rpi",
      domain: 0,
      allow: {
        publishers: [
                      ".*/battery_state",
                      // ".*/cliff_intensity",
                      // ".*/cmd_audio",
                      // ".*/cmd_lightring",
                      ".*/cmd_vel",
                      ".*/dock_status",
                      // ".*/hazard_detection",
                      ".*/imu",
                      // ".*/interface_buttons",
                      // ".*/ir_intensity",
                      // ".*/ir_opcode",
                      ".*/joint_states",
                      // ".*/kidnap_status",
                      // ".*/mobility_monitor/transition_event",
                      // ".*/mouse",
                      ".*/odom",
                      ".*/robot_description",
                      ".*/robot_state/transition_event",
                      ".*/scan",
                      // ".*/slip_status",
                      ".*/static_transform/transition_event",
                      // ".*/stop_status",
                      ".*/tf",
                      ".*/tf_static",
                      // ".*/wheel_status",
                      // ".*/wheel_ticks",
                      // ".*/wheel_vels",
                      // "/clock",
                      // "/parameter_events",
                      // "/rosout",
                      // "/set_elevator",
                      // "/tf",
                      // "/tf_static",
                    ],
        subscribers: [
                      ".*/battery_state",
                      // ".*/cliff_intensity",
                      // ".*/cmd_audio",
                      // ".*/cmd_lightring",
                      ".*/cmd_vel",
                      ".*/dock_status",
                      // ".*/hazard_detection",
                      ".*/imu",
                      // ".*/interface_buttons",
                      // ".*/ir_intensity",
                      // ".*/ir_opcode",
                      ".*/joint_states",
                      // ".*/kidnap_status",
                      // ".*/mobility_monitor/transition_event",
                      // ".*/mouse",
                      ".*/odom",
                      ".*/robot_description",
                      ".*/robot_state/transition_event",
                      ".*/scan",
                      // ".*/slip_status",
                      ".*/static_transform/transition_event",
                      // ".*/stop_status",
                      ".*/tf",
                      ".*/tf_static",
                      // ".*/wheel_status",
                      // ".*/wheel_ticks",
                      // ".*/wheel_vels",
                      // "/clock",
                      // "/parameter_events",
                      // "/rosout",
                      // "/set_elevator",
                      // "/tf",
                      // "/tf_static",
                     ],
        service_servers: [".*/start_motor", ".*/stop_motor"],
        service_clients: [".*/start_motor", ".*/stop_motor"],
        action_servers: [".*/dock", ".*/undock"],
        action_clients: [".*/dock", ".*/undock"],
      },
      queries_timeout: {
        actions: {
          send_goal: 1.0,
          cancel_goal: 1.0,
          get_result: [
            ".*long_mission=3600", 
            ".*short_action=10.0",
            ".*/dock=120.0",
            ".*/undock=10.0",
            ],
        }
      }
    },
  },

  //// Zenoh related configuration.
  mode: "peer",
  connect: {
    endpoints: [
      "tcp/localhost:7447"
    ]
  },
  listen: {
    endpoints: [
      "tcp/0.0.0.0:7445"
    ]
  },
  scouting: {
    timeout: 3000,
    delay: 500,
    multicast: {
      enabled: true,
      address: "224.0.0.224:7446",
      interface: "auto",
      ttl: 1,
      autoconnect: { router: [], peer: ["router", "peer"], client: ["router"] },
      autoconnect_strategy: { peer: { to_router: "always", to_peer: "always" } },
      listen: true
    },
    gossip: {
      enabled: true,
      multihop: false,
      target: { router: ["router", "peer"], peer: ["router", "peer"]},
      autoconnect: { router: [], peer: ["router", "peer"] },
      autoconnect_strategy: { peer: { "to-router": "always", "to-peer": "always" } }
    },
  }
}